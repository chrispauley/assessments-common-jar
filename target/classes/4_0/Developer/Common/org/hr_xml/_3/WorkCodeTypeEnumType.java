//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, vJAXB 2.1.10 in JDK 6 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.15 at 03:08:51 PM EST 
//


package org.hr_xml._3;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for WorkCodeTypeEnumType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="WorkCodeTypeEnumType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}normalizedString">
 *     &lt;enumeration value="Authorized"/>
 *     &lt;enumeration value="Prohibited"/>
 *     &lt;enumeration value="Exception"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "WorkCodeTypeEnumType", namespace = "http://www.hr-xml.org/3")
@XmlEnum
public enum WorkCodeTypeEnumType {


    /**
     * Indicates within the boundaries of any pre-existing understanding between  provider and CRA that the specified scope is required.  For Example, include all felony misdemeanors containing actionable dates within the last 7 years.
     * 
     */
    @XmlEnumValue("Authorized")
    AUTHORIZED("Authorized"),

    /**
     * Indicates within the boundaries of any pre-existing understanding between  provider and CRA that the specified scope is not required.  For Example, Standard scope of work will apply to this order, however, do not include minor misdemeanors or any infractions.
     * 
     */
    @XmlEnumValue("Prohibited")
    PROHIBITED("Prohibited"),

    /**
     * Indicates within the boundaries of any pre-existing understanding between  provider and CRA that the specified scope of work could not be met.  Usage is primarily intended in the ScreeningVendorReport 
     * 
     */
    @XmlEnumValue("Exception")
    EXCEPTION("Exception");
    private final String value;

    WorkCodeTypeEnumType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static WorkCodeTypeEnumType fromValue(String v) {
        for (WorkCodeTypeEnumType c: WorkCodeTypeEnumType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
